{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","pages/useMemoDemo.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","Timer","Date","now","MemoTimer","React","memo","Counter","props","useState","count","setCount","name","setName","memorizedValue","useMemo","console","log","memorizedComponent","memorizeFunction","onClick"],"mappings":"iGAGe,SAASA,EAAeC,EAAKC,GAC1C,OCJa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDGxB,CAAeA,IEJT,SAA+BA,EAAKC,GACjD,GAAMG,OAAOC,YAAYC,OAAON,IAAgD,uBAAxCM,OAAOC,UAAUC,SAASC,KAAKT,GAAvE,CAIA,IAAIU,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKhB,EAAII,OAAOC,cAAmBM,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAETnB,GAAKS,EAAKW,SAAWpB,GAH8CU,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFvBuB,CAAqBV,EAAKC,IGJ3C,WACb,MAAM,IAAIsB,UAAU,wDHG0C,GAJhE,mC,8EIGA,SAASC,IACL,OACI,uCAAaC,KAAKC,OAG1B,IAAMC,EAAYC,IAAMC,KAAKL,GA4CdM,UA3Cf,SAAiBC,GAAQ,IAAD,EACMC,mBAAS,GADf,mBACbC,EADa,KACNC,EADM,OAEIF,mBAAS,aAFb,mBAEbG,EAFa,KAEPC,EAFO,KAKdC,EAAiBC,mBAAQ,WAE3B,OADAC,QAAQC,IAAI,wCACG,EAARP,IACR,CAACA,IAGEQ,EAAqBH,mBAAQ,WAC/B,OAAO,kBAACd,EAAD,QACR,CAACW,IAGEO,EAAmBJ,mBAAQ,WAC7B,OAAO,WACHJ,EAASD,EAAQ,MAEtB,IACH,OACI,6BACI,qCAAWA,GACX,2CAAiBI,GACjB,kBAAC,IAAD,CAAQM,QAAS,kBAAMT,EAASD,EAAQ,KAAxC,sBACA,6BACA,6BACA,oCAAUE,GACV,kBAAC,IAAD,CAAQQ,QAAS,kBAAMP,EAAQ,YAAaH,EAAQ,KAApD,qBACA,6BACA,6BACA,uDAA4B,kBAACT,EAAD,OAC5B,mDAAyBiB,GACzB,6BACA,6BACA,sDAA2B,kBAACd,EAAD,CAAWgB,QAAS,kBAAMT,EAASD,EAAQ,OACtE,kDAAuB,kBAACN,EAAD,CAAWgB,QAASD","file":"static/js/11.843b9f4e.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React, { useState, useMemo} from 'react'\r\nimport { Button } from 'antd'\r\n\r\nfunction Timer() {\r\n    return (\r\n        <span>time: {Date.now()}</span>\r\n    )\r\n}\r\nconst MemoTimer = React.memo(Timer)\r\nfunction Counter(props) {\r\n    const [count, setCount] = useState(0)\r\n    const [name, setName] = useState('zhangjing')\r\n\r\n    // 只有当依赖项count改变的时候才会执行回调函数重新计算值\r\n    const memorizedValue = useMemo(() => {\r\n        console.log('double重新计算了')\r\n        return count * 2\r\n    }, [count])\r\n\r\n    // 记忆组件，在渲染期间执行，仅当依赖项name改变的时候重新渲染组件\r\n    const memorizedComponent = useMemo(() => {\r\n        return <Timer />\r\n    }, [name])\r\n    \r\n    // 被记忆的函数，只有当依赖项改变的时候才会改变函数的引用\r\n    const memorizeFunction = useMemo(() => {\r\n        return () => {\r\n            setCount(count + 1)\r\n        }\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <p>count: {count}</p>\r\n            <p>doubleCount: {memorizedValue}</p>\r\n            <Button onClick={() => setCount(count + 1)}>click to add count</Button>\r\n            <br />\r\n            <br />\r\n            <p>name: {name}</p>\r\n            <Button onClick={() => setName('zhangjing'+ count + 1)}>click to set name</Button>\r\n            <br />\r\n            <br />\r\n            <p>not memorized component: <Timer /></p>\r\n            <p>memorized component: {memorizedComponent}</p>\r\n            <br />\r\n            <br />\r\n            <p>not memorized function: <MemoTimer onClick={() => setCount(count + 1)} /></p>\r\n            <p>memorized function: <MemoTimer onClick={memorizeFunction} /></p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter"],"sourceRoot":""}