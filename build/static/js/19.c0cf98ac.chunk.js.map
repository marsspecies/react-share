{"version":3,"sources":["pages/classLifeCycleOld.jsx"],"names":["TestChild","props","state","name","nextProps","console","log","nextState","this","React","Component","MyContext","createContext","color","LifeCycleDemo","context","hasError","handleClick","setState","prevProps","prevState","error","info","onClick","contextType"],"mappings":"6KAGMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAMF,EAAME,MAHD,E,uFAMOC,GACtBC,QAAQC,IAAI,2EAAqBF,K,4CAEfA,EAAWG,GAE7B,OADAF,QAAQC,IAAI,uFAAuBF,EAAWG,GACvCH,EAAUD,OAASK,KAAKP,MAAME,O,4CAGrCE,QAAQC,IAAI,sD,2CAGZD,QAAQC,IAAI,sD,+BAGZ,OACA,qCAAWE,KAAKN,MAAMC,U,GAtBNM,IAAMC,WA0BxBC,EAAWF,IAAMG,cAAc,CACjCC,MAAO,SAELC,E,YAMF,WAAYb,EAAOc,GAAU,IAAD,8BACxB,4CAAMd,KANVC,MAAQ,CACJC,KAAM,YACNa,UAAU,GAGc,EA8B5BC,YAAc,WACV,EAAKC,SAAS,CACVf,KAAM,eA9BVE,QAAQC,IAAI,2CAAmBS,GAFP,E,kFAKxBV,QAAQC,IAAI,sD,0CAGZD,QAAQC,IAAI,sD,4CAEMF,EAAWG,GAE7B,OADAF,QAAQC,IAAI,yFACL,I,0CAESF,EAAWG,GAC3BF,QAAQC,IAAI,sD,yCAGGa,EAAWC,GAC1Bf,QAAQC,IAAI,sD,6CAGZD,QAAQC,IAAI,sD,wCAEEe,EAAOC,GACrBjB,QAAQgB,MAAM,mDAAiBC,GAC/Bd,KAAKU,SAAS,CACVF,UAAU,M,+BASd,OAAIR,KAAKN,MAAMc,SAEJ,qDAGP,6BACI,uCAAaR,KAAKN,MAAMC,MACxB,kBAAC,IAAD,CAAQoB,QAASf,KAAKS,aAAtB,yBACA,6BACA,6BACA,kBAACjB,EAAD,CAAWG,KAAMK,KAAKN,MAAMC,Y,GApDhBM,IAAMC,WAA5BI,EAKKU,YAAcb,EAqDVG","file":"static/js/19.c0cf98ac.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button } from 'antd'\r\n\r\nclass TestChild extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: props.name\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log('---子组件接收到了新的属性---', nextProps)\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('---子组件是否需要重新渲染呢？---', nextProps, nextState)\r\n        return nextProps.name !== this.props.name\r\n    }\r\n    componentWillUpdate(){\r\n        console.log('---子组件即将更新---')\r\n    }\r\n    componentDidUpdate() {\r\n        console.log('---子组件更新完毕---')\r\n    }\r\n    render() {\r\n        return (\r\n        <p>child: {this.state.name}</p>\r\n        )\r\n    }\r\n}\r\nconst MyContext= React.createContext({\r\n    color: '#f00'\r\n})\r\nclass LifeCycleDemo extends React.Component {\r\n    state = {\r\n        name: 'zhangjing',\r\n        hasError: false\r\n    }\r\n    static contextType = MyContext\r\n    constructor(props, context) {\r\n        super(props)\r\n        console.log('-----组件初始化-----', context)\r\n    }\r\n    componentWillMount(){\r\n        console.log('---父组件即将挂载---')\r\n    }\r\n    componentDidMount() {\r\n        console.log('---父组件挂载完毕---')\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('---父组件是否需要重新渲染呢？---')\r\n        return true\r\n    }\r\n    componentWillUpdate(nextProps, nextState){\r\n        console.log('---父组件即将更新---')\r\n        \r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log('---父组件更新完毕---')\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('---父组件即将卸载---')\r\n    }\r\n    componentDidCatch(error, info) {\r\n        console.error('---组件发生了错误---', info)\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n    handleClick = () => {\r\n        this.setState({\r\n            name: 'zhangjing'\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // 你可以渲染任何自定义的降级 UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n        return (\r\n            <div>\r\n                <p>my name: {this.state.name}</p>\r\n                <Button onClick={this.handleClick}>click to change state</Button>\r\n                <br />\r\n                <br />\r\n                <TestChild name={this.state.name} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LifeCycleDemo"],"sourceRoot":""}