{"version":3,"sources":["pages/apolloDemo.tsx"],"names":["QUERY_USER","gql","QUERY_TASKS","CREATE_TOKEN","QUERY_VIWER","client","ApolloClient","link","createHttpLink","uri","cache","InMemoryCache","ChildApolloDemo","props","query","variables","id","loading","error","data","tasks","map","item","key","style","color","content","description","ChildApolloHooksDemo","useMutation","createToken","team","useQuery","console","log","onClick","email","password","ApolloDemo","useState","name","age","user","setUser","useEffect","then","result","readQuery"],"mappings":"+rCAUA,IAAMA,EAAaC,IAAH,KAUVC,EAAcD,IAAH,KASXE,EAAeF,IAAH,KAQZG,EAAcH,IAAH,KAkBXI,EAAS,IAAIC,IAAa,CAC5BC,KAAMC,YAAe,CACjBC,IAAK,kCAETC,MAAO,IAAIC,MAMTC,EAAkB,SAACC,GACrB,OACI,kBAAC,IAAD,CAAgBR,OAAQA,GACpB,kBAAC,IAAD,CACIS,MAAOZ,EACPa,UAAW,CAACC,GAAI,KAGZ,YAIO,IAJLC,EAII,EAJJA,QAASC,EAIL,EAJKA,MAAOC,EAIZ,EAJYA,KAKd,OAAIF,EAAgB,yCAChBC,EAAc,qCAAWA,GACtBC,EAAKC,MAAMC,KAAI,SAACC,EAAWC,GAC9B,OACI,yBAAKA,IAAKA,GACN,uCAAY,0BAAMC,MAAO,CAACC,MAAO,QAASH,EAAKI,UAC/C,2CAAgB,0BAAMF,MAAO,CAACC,MAAO,QAASH,EAAKK,uBAYjFC,EAAuB,SAACf,GAAgB,IAAD,EACKgB,YAAY1B,GADjB,mBAClC2B,EADkC,YACpBX,EADoB,EACpBA,KACRY,GAF4B,EACdd,QADc,EACLC,MACfc,YAAS5B,EAAa,CAACW,UAAW,CAACC,GAAI,KAArDG,MAEPc,QAAQC,IAAIf,GACZc,QAAQC,IAAIH,GAIZ,OACI,6BACI,oDACA,kBAAC,IAAD,CAAQI,QANI,WAChBL,EAAY,CAAEf,UAAW,CAACqB,MAAO,oBAAqBC,SAAU,cAK5D,iBAiDGC,UA3Cc,SAACzB,GAAgB,IAAD,EACjB0B,mBAAS,CAC7BC,KAAM,GACNC,IAAK,KACLzB,GAAI,OAJiC,mBAClC0B,EADkC,KAC5BC,EAD4B,KAMzCC,qBAAU,WACNvC,EAAOS,MAAM,CACTA,MAAOd,EACPe,UAAW,CACPC,GAAI,KAET6B,MAAK,SAACC,GACLb,QAAQC,IAAIY,GACZ,IAAMJ,EAAOI,EAAO3B,KAAKuB,KACzBC,EAAQD,SAYhB,OACI,6BACI,wCAAcA,EAAKF,MACnB,mCAASE,EAAKD,KACd,6BACA,6BACA,kBAAC,IAAD,CAAQN,QAfC,WACb,IAAMhB,EAAOd,EAAO0C,UAAU,CAC1BjC,MAAOd,EACPe,UAAW,CACPC,GAAI,KAGZiB,QAAQC,IAAIf,KAQR,aACA,kBAACP,EAAD,MACA,kBAAC,IAAD,CAAqBP,OAAQA,GACzB,kBAACuB,EAAD","file":"static/js/17.04987fe7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ApolloClient from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloProvider, Query } from 'react-apollo'\nimport { ApolloProvider as ApolloHooksProvider, useQuery, useMutation } from 'react-apollo-hooks'\n\nimport gql from 'graphql-tag'\nimport { Button } from 'antd'\n\nconst QUERY_USER = gql`\nquery($id: Int){\n    user(id: $id) {\n        id\n        name\n        age\n    }\n}\n`\n\nconst QUERY_TASKS = gql`\n    query($id: Int){\n        tasks(id: $id) {\n            id\n            content\n            description\n        }\n    }\n`\nconst CREATE_TOKEN = gql`\n    mutation($email: String!, $password: String!){\n        createToken(input: {email: $email, password: $password}) {\n            token\n        }\n    }\n`\n\nconst QUERY_VIWER = gql`\n    query($id: Int) {\n        viewer(id: $id) {\n            id\n            name\n            email\n            team {\n                liveAccount {\n                    enabled\n                }\n                sandboxAccount {\n                    enabled\n                }\n            }\n        }\n    }\n`\n\nconst client = new ApolloClient({\n    link: createHttpLink({\n        uri: 'http://localhost:9000/graphql'\n    }),\n    cache: new InMemoryCache()\n})\ninterface Props {\n\n}\n\nconst ChildApolloDemo = (props: any) => {\n    return (\n        <ApolloProvider client={client}>\n            <Query\n                query={QUERY_TASKS}\n                variables={{id: 1}}\n            >\n                {\n                    ({loading, error, data}: {\n                        data: any\n                        error?: any\n                        loading: boolean\n                    }) => {\n                        if (loading) return <p>loading...</p>\n                        if (error) return <p>error: {error}</p>\n                        return data.tasks.map((item: any, key: number) => {\n                            return (\n                                <div key={key}>\n                                    <p>content: <span style={{color: 'red'}}>{item.content}</span></p>\n                                    <p>description: <span style={{color: 'red'}}>{item.description}</span></p>\n                                </div>\n                            )\n                        })\n                    }\n                }\n            </Query>\n            \n        </ApolloProvider>\n    )\n}\n\nconst ChildApolloHooksDemo = (props: any) => {\n    const [createToken, {data, loading, error}] = useMutation(CREATE_TOKEN)\n    const {data: team} = useQuery(QUERY_VIWER, {variables: {id: 1}})\n    \n    console.log(data)\n    console.log(team)\n    const handleClick = () => {\n        createToken({ variables: {email: '777@zhangjing.com', password: '123456'} })\n    }\n    return (\n        <div>\n            <p>test use apollo-hooks</p>\n            <Button onClick={handleClick}>createToken</Button>\n        </div>\n    )\n}\n\n\nconst ApolloDemo: React.FC = (props: any) => {\n    const [user, setUser] = useState({\n        name: '',\n        age: null,\n        id: null\n    })\n    useEffect(() => {\n        client.query({\n            query: QUERY_USER,\n            variables: {\n                id: 1\n            }\n        }).then((result: any) => {\n            console.log(result)\n            const user = result.data.user\n            setUser(user)\n        })\n    })\n    const getCache = () => {\n        const data = client.readQuery({\n            query: QUERY_USER,\n            variables: {\n                id: 1\n            }\n        })\n        console.log(data)\n    }\n    return (\n        <div>\n            <p>username: {user.name}</p>\n            <p>age: {user.age}</p>\n            <br />\n            <br />\n            <Button onClick={getCache}>get cache</Button>\n            <ChildApolloDemo />\n            <ApolloHooksProvider client={client}>\n                <ChildApolloHooksDemo />\n            </ApolloHooksProvider>\n        </div>\n    )\n}\n\n\nexport default ApolloDemo"],"sourceRoot":""}