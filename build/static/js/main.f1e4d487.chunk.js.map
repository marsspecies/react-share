{"version":3,"sources":["components/Loading.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","props","tip","SiderBar","Loadable","loader","loading","ClassLifeCycleOld","ClassLifeCycleNew","ClassPureRender","FuncComponent","FuncMemo","CompareClasstoFunc","TestUseStateDemo","TestUseEffectDemo","TestUseMemoDemo","TestUseCallbackDemo","TestUseContextDemo","TestUseReducerDemo","ApolloDemo","NotFound","Sider","Layout","Content","App","state","className","exact","path","render","to","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAaeA,MARf,SAAiBC,GACb,OACI,6BACI,kBAAC,IAAD,CAAMC,IAAI,iBCAhBC,EAAWC,IAAS,CACtBC,OAAQ,kBAAM,6DACdC,QAASN,IAEPO,EAAoBH,IAAS,CAC/BC,OAAQ,kBAAM,sDACdC,QAASN,IAEPQ,EAAoBJ,IAAS,CAC/BC,OAAQ,kBAAM,sDACdC,QAASN,IAEPS,EAAkBL,IAAS,CAC7BC,OAAQ,kBAAM,sDACdC,QAASN,IAEPU,EAAgBN,IAAS,CAC3BC,OAAQ,kBAAM,gCACdC,QAASN,IAEPW,EAAWP,IAAS,CACtBC,OAAQ,kBAAM,sDACdC,QAASN,IAEPY,EAAqBR,IAAS,CAChCC,OAAQ,kBAAM,oEACdC,QAASN,IAEPa,EAAmBT,IAAS,CAC9BC,OAAQ,kBAAM,sDACdC,QAASN,IAEPc,EAAoBV,IAAS,CAC/BC,OAAQ,kBAAM,sDACdC,QAASN,IAEPe,EAAkBX,IAAS,CAC7BC,OAAQ,kBAAM,sDACdC,QAASN,IAEPgB,EAAsBZ,IAAS,CACjCC,OAAQ,kBAAM,qDACdC,QAASN,IAEPiB,EAAqBb,IAAS,CAChCC,OAAQ,kBAAM,qDACdC,QAASN,IAEPkB,EAAqBd,IAAS,CAChCC,OAAQ,kBAAM,sDACdC,QAASN,IAEPmB,EAAaf,IAAS,CACxBC,OAAQ,kBAAM,6DACdC,QAASN,IAEPoB,EAAWhB,IAAS,CACtBC,OAAQ,kBAAM,gCACdC,QAASN,IAGLqB,EAAmBC,IAAnBD,MAAOE,EAAYD,IAAZC,QA4CAC,E,2MAzCXC,MAAQ,G,wEAGJ,OACI,yBAAMC,UAAY,OACd,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAACL,EAAD,KACI,kBAAClB,EAAD,OAEJ,kBAAC,IAAD,KACI,kBAACoB,EAAD,KACA,yBAAKG,UAAU,aACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,0BACjD,kBAAC,IAAD,CAAOF,KAAK,qBAAqBG,UAAWxB,IAC5C,kBAAC,IAAD,CAAOqB,KAAK,qBAAqBG,UAAWvB,IAC5C,kBAAC,IAAD,CAAOoB,KAAK,mBAAmBG,UAAWtB,IAC1C,kBAAC,IAAD,CAAOmB,KAAK,iBAAiBG,UAAWrB,IACxC,kBAAC,IAAD,CAAOkB,KAAK,YAAYG,UAAWpB,IACnC,kBAAC,IAAD,CAAOiB,KAAK,sBAAsBG,UAAWnB,IAC7C,kBAAC,IAAD,CAAOgB,KAAK,oBAAoBG,UAAWlB,IAC3C,kBAAC,IAAD,CAAOe,KAAK,qBAAqBG,UAAWjB,IAC5C,kBAAC,IAAD,CAAOc,KAAK,mBAAmBG,UAAWhB,IAC1C,kBAAC,IAAD,CAAOa,KAAK,uBAAuBG,UAAWf,IAC9C,kBAAC,IAAD,CAAOY,KAAK,sBAAsBG,UAAWd,IAC7C,kBAAC,IAAD,CAAOW,KAAK,sBAAsBG,UAAWb,IAC7C,kBAAC,IAAD,CAAOU,KAAK,gBAAgBG,UAAWZ,IACvC,kBAAC,IAAD,CAAOS,KAAK,IAAIG,UAAWX,e,GA7B7CY,IAAMC,WC3DJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f1e4d487.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Spin } from 'antd'\n\n\nfunction Loading(props) {\n    return (\n        <div>\n            <Spin tip=\"Loading...\" />\n        </div>\n    )\n}\n\nexport default Loading","import React from 'react';\nimport './App.css';\nimport './App.less';\n\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport { Layout } from 'antd'\nimport Loadable from 'react-loadable'\nimport Loading from './components/Loading'\nconst SiderBar = Loadable({\n    loader: () => import('./components/siderBar'),\n    loading: Loading\n})\nconst ClassLifeCycleOld = Loadable({\n    loader: () => import('./pages/classLifeCycleOld'),\n    loading: Loading\n})\nconst ClassLifeCycleNew = Loadable({\n    loader: () => import('./pages/classLifeCycleNew'),\n    loading: Loading\n})\nconst ClassPureRender = Loadable({\n    loader: () => import('./pages/classPureComponent'),\n    loading: Loading\n})\nconst FuncComponent = Loadable({\n    loader: () => import('./pages/funcComponent'),\n    loading: Loading\n})\nconst FuncMemo = Loadable({\n    loader: () => import('./pages/funcMemo'),\n    loading: Loading\n})\nconst CompareClasstoFunc = Loadable({\n    loader: () => import('./pages/CompareClassToFunc'),\n    loading: Loading\n})\nconst TestUseStateDemo = Loadable({\n    loader: () => import('./pages/useStateDemo'),\n    loading: Loading\n})\nconst TestUseEffectDemo = Loadable({\n    loader: () => import('./pages/useEffectDemo'),\n    loading: Loading\n})\nconst TestUseMemoDemo = Loadable({\n    loader: () => import('./pages/useMemoDemo'),\n    loading: Loading\n})\nconst TestUseCallbackDemo = Loadable({\n    loader: () => import('./pages/useCallbackDemo'),\n    loading: Loading\n})\nconst TestUseContextDemo = Loadable({\n    loader: () => import('./pages/useContextDemo'),\n    loading: Loading\n})\nconst TestUseReducerDemo = Loadable({\n    loader: () => import('./pages/useReducerDemo'),\n    loading: Loading\n})\nconst ApolloDemo = Loadable({\n    loader: () => import('./pages/apolloDemo'),\n    loading: Loading\n})\nconst NotFound = Loadable({\n    loader: () => import('./pages/NotFound'),\n    loading: Loading\n})\n\nconst { Sider, Content } = Layout;\n\nclass App extends React.Component {\n    state = {\n    }\n    render() {\n        return (\n            < div className = \"App\" >\n                <Layout>\n                    <Router>\n                        <Sider>\n                            <SiderBar />\n                        </Sider>\n                        <Layout>\n                            <Content>\n                            <div className=\"container\">\n                                <Switch>\n                                    <Route exact path=\"/\" render={() => <Redirect to=\"/classLifeCycleOld\" />} />\n                                    <Route path=\"/classLifeCycleOld\" component={ClassLifeCycleOld} />\n                                    <Route path=\"/classLifeCycleNew\" component={ClassLifeCycleNew} />\n                                    <Route path=\"/classPureRender\" component={ClassPureRender} />\n                                    <Route path=\"/funcComponent\" component={FuncComponent} />\n                                    <Route path=\"/funcMemo\" component={FuncMemo} />\n                                    <Route path=\"/compareClasstoFunc\" component={CompareClasstoFunc} />\n                                    <Route path=\"/testUseStateDemo\" component={TestUseStateDemo} />\n                                    <Route path=\"/testUseEffectDemo\" component={TestUseEffectDemo} />\n                                    <Route path=\"/testUseMemoDemo\" component={TestUseMemoDemo} />\n                                    <Route path=\"/testUseCallbackDemo\" component={TestUseCallbackDemo} />\n                                    <Route path=\"/testUseContextDemo\" component={TestUseContextDemo} />\n                                    <Route path=\"/testUseReducerDemo\" component={TestUseReducerDemo} />\n                                    <Route path=\"/apolloClient\" component={ApolloDemo} />\n                                    <Route path=\"*\" component={NotFound} />\n                                </Switch>\n                            </div>\n                            </Content>\n                        </Layout>\n                    </Router>\n                </Layout>\n                \n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}