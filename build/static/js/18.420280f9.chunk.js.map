{"version":3,"sources":["pages/classLifeCycleNew.jsx"],"names":["TestChild","props","state","name","nextProps","nextState","console","log","this","prevProps","prevState","React","Component","LifeCycleDemo","hasError","handleClick","setState","snapshot","info","onClick","error"],"mappings":"6KAGMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAMF,EAAME,MAHD,E,mFAaGC,EAAWC,GAE7B,OADAC,QAAQC,IAAI,uFAAuBH,EAAWC,GACvCD,EAAUD,OAASK,KAAKP,MAAME,O,yCAEtBM,EAAWC,GAC1BJ,QAAQC,IAAI,sD,+BAIZ,OACA,qCAAWC,KAAKN,MAAMC,S,gDAjBMC,EAAWM,GAGvC,OAFAJ,QAAQC,IAAI,gEAELH,EAAUD,OAASO,EAAUP,KAAO,KAAO,CAC9CA,KAAMC,EAAUD,U,GAXJQ,IAAMC,WA6BxBC,E,YAKF,WAAYZ,GAAQ,IAAD,8BACf,4CAAMA,KALVC,MAAQ,CACJC,KAAM,YACNW,UAAU,GAEK,EA8BnBC,YAAc,WACV,EAAKC,SAAS,CACVb,KAAM,iBAhCK,E,iFASfG,QAAQC,IAAI,gD,4CAEMH,EAAWC,GAE7B,OADAC,QAAQC,IAAI,4EACLF,EAAUF,OAASK,KAAKN,MAAMC,O,yCAEtBM,EAAWC,EAAWO,GACrCX,QAAQC,IAAI,mDAAiBU,EAASC,Q,8CAOlBT,EAAWC,GAG/B,OADAJ,QAAQC,IAAI,mCACL,CACHW,KAAM,W,+BAUV,OADAZ,QAAQC,IAAI,mEACRC,KAAKN,MAAMY,SAEJ,qDAGP,6BACI,uCAAaN,KAAKN,MAAMC,MACxB,kBAAC,IAAD,CAAQgB,QAASX,KAAKO,aAAtB,yBACA,6BACA,6BACA,kBAACf,EAAD,CAAWG,KAAMK,KAAKN,MAAMC,W,gDA5CRC,EAAWM,GAGvC,OAFAJ,QAAQC,IAAI,4EAEL,O,+CAaqBa,GAE5B,MAAO,CAAEN,UAAU,O,GA1BCH,IAAMC,WA0DnBC","file":"static/js/18.420280f9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button } from 'antd'\r\n\r\nclass TestChild extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            name: props.name\r\n        }\r\n    }\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        console.log('子组件挂载、更新之前')\r\n        // 在这里判断是否需要更新state\r\n        return nextProps.name === prevState.name ? null : {\r\n            name: nextProps.name\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('---子组件是否需要重新渲染呢？---', nextProps, nextState)\r\n        return nextProps.name !== this.props.name\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log('---子组件更新完毕---')\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n        <p>Child: {this.state.name}</p>\r\n        )\r\n    }\r\n}\r\n\r\nclass LifeCycleDemo extends React.Component {\r\n    state = {\r\n        name: 'zhangjing',\r\n        hasError: false\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        console.log('父组件组件挂载、更新之前')\r\n        // 在这里判断是否需要更新state\r\n        return null\r\n    }\r\n    componentDidMount() {\r\n        console.log('---组件挂载完毕---')\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('---我是否需要重新渲染呢？---')\r\n        return nextState.name !== this.state.name\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log('---父组件更新完毕---', snapshot.info)\r\n    }\r\n    // 建议使用getDerivedStateFromError代替componentDidCatch\r\n    static getDerivedStateFromError(error) {\r\n        // 更新 state 使下一次渲染可以显降级 UI\r\n        return { hasError: true };\r\n    }\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        // 在最近一次render之后dom输出之前\r\n        console.log('----即将输出dom')\r\n        return {\r\n            info: '77777'\r\n        }\r\n    }\r\n    handleClick = () => {\r\n        this.setState({\r\n            name: 'zhangjing33'\r\n        })\r\n    }\r\n    render() {\r\n        console.log('---父组件已经调用render方法')\r\n        if (this.state.hasError) {\r\n            // 你可以渲染任何自定义的降级 UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n        return (\r\n            <div>\r\n                <p>my name: {this.state.name}</p>\r\n                <Button onClick={this.handleClick}>click to change state</Button>\r\n                <br />\r\n                <br />\r\n                <TestChild name={this.state.name} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LifeCycleDemo"],"sourceRoot":""}